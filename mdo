#!/usr/bin/env ruby

#
# Android Cluster Toolkit
#
# mdo - execute an ADB command on the selected device(s)
#
# (c) 2012-2014 Joshua J. Drake (jduck)
#

bfn = __FILE__
while File.symlink?(bfn)
  bfn = File.expand_path(File.readlink(bfn), File.dirname(bfn))
end
$:.unshift(File.dirname(bfn))

require 'devices'
require 'madb'


# process args
if ARGV.length < 3 or not parse_global_options()
  $stderr.puts "usage: mdo [-1v] -d <device names or serials separated by commas> <parameters to adb client>"
  exit(1)
end


# validate the adb command line
cmd = ARGV.first
if cmd == 'wait-for-device'
  ARGV.shift
  cmd = ARGV.first
end
case cmd
  when 'bugreport', 'get-state', 'get-serialno', 'get-devpath', 'reboot', 'reboot-bootloader', 'root', 'remount'
    # allow for all usage patterns

  when 'shell'
    if ARGV.length < 2 and ($do_all or $selected_devices.length > 1)
      $stderr.puts "[!] the #{cmd} command requires an argument when used with multiple devices"
      exit(1)
    end

  when 'push', 'install'
    if ARGV.length < 2
      $stderr.puts "[!] the #{cmd} command requires an argument"
      exit(1)
    end

  when 'pull'
    if $do_all or $selected_devices.length > 1
      $stderr.puts "[!] use ./mpull to pull from multiple devices"
      exit(1)
    end

  when 'logcat'
    if $do_all or $selected_devices.length > 1
      $stderr.puts "[!] specify a single device for logcat"
      exit(1)
    end

  else
    $stderr.puts "[!] unsupported command: #{cmd}"
    exit(1)
end


# run the commands
multi_adb()

